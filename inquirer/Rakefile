require 'csv'

dirname = File.dirname(__FILE__)
lib = dirname + '/lib'
$: << lib

require lib + '/antonym'


$default_config = "etc/local.yaml"


def fail(msg, code=1)
  $stderr.puts msg
  exit code
end

def get_env(name, default=nil)
  if ENV.has_key?(name)
    ENV[name]
  elsif default
    puts "using default #{name}=#{default}"
    default
  else
    fail "#{name} not provided"
  end
end

def run(cmd)
  # secure flag allows me to run commands with passwords in them safely
  # (especially when output is emailed via cron)
  secure = get_env("secure", "")
  puts cmd unless not secure.empty?
  system cmd
  fail "'#{cmd}' failed with status #{$?.exitstatus}" if $?.exitstatus != 0
end


def load_config
  cpath = get_env("config", $default_config)
  Antonym::Configuration.from_path(cpath)
end


class ServiceListener
  
  def request(uri, method, headers={})
    puts "#{method} #{uri}\n#{headers.inspect}"
    puts
  end
  
  def response(uri, response)
    header_str = ""
    response.header.all.sort.each { |l| header_str << "#{l[0]}: #{l[1]}\n" }
    # puts "#{response.status} #{uri}\n#{header_str}"
    puts "#{response.status} #{uri}\n#{header_str}\n#{response.content}"
  end
  
end


def default_service_args
  { :listener => ServiceListener.new }
end

def artifact_service
  Antonym::ArtifactService.new(load_config(), default_service_args())
end

def cron_service
  Antonym::CronService.new(load_config(), default_service_args())
end

def data_analysis_service
  Antonym::DataAnalysisService.new(load_config(), default_service_args())
end

def mixture_service
  Antonym::MixtureService.new(load_config(), default_service_args())
end

def source_service
  Antonym::SourceService.new(load_config(), default_service_args())
end

def twitter_service
  Antonym::TwitterService.new(load_config(), default_service_args())
end

def feed_service
  Antonym::FeedService.new(load_config(), default_service_args())
end


namespace :cron do
  
end


namespace :artifact do
  
  desc "loads each line in a file as an artifact"
  task :import_lines do
    file = get_env("file")
    src = get_env("src")
  
    svc = artifact_service()
    open(file) do |stream|
      stream.each do |line|
        # removes trailing newlines
        line.strip!
      
        artifact = { 'source' => src,
          'content-type' => 'text/plain',
          'body' => line }
        svc.post(artifact)
      end
    end
  end

  desc "load artifacts from a csv file"
  task :import_csv do
    require 'csv'
  
    path = get_env("path")
    max = get_env("max", :no)
    start = get_env("start", :no)
    svc = artifact_service()
  
    max_num = max.to_i unless max == :no
    start_num = start.to_i unless start == :no
    open(path) do |stream|
      count = 0
      CSV::Reader.parse(stream) do |row|
        count = count.next
        if not start_num.nil? and count < start_num
          puts "skipping #{count}"
          next
        end
      
        # puts "row: #{row.inspect}"
        
        source = row[0]
        body = row[1]
      
        # lack of to_s on source and body results in "stack level too deep" exception
        a = { :source => source.to_s,
            'content-type' => 'text/plain',
            :body => body.to_s }
        
        puts "[#{count}] artifact: #{a.inspect}"
        # puts "to_json: #{a.to_json}"
        
        begin
          svc.post(a)
        rescue Antonym::ServiceException => e
          $stderr.puts "#{e.class.name}: #{e}"
          if e.code == 409
            next
          else
            break
          end
        end
      
        break if max_num == count
        puts
      end
    end
  end
  
end


desc "execute an HTTP method: m=method p=path config=config_file body=body"
task :http do
  method = get_env('m', 'get')
  path = get_env('p')
  body = get_env('b', :no)
  body = nil if body == :no
  
  if body =~ /^@/
    # body is a file
    open(body[1..-1]) do |stream|
      body = stream.read
    end
  end
  
  puts "body:\n#{body}"
  
  config = load_config()
  svc = Antonym::GenericService.new(config)
  method_sym = method.to_sym
  fail "unrecognized method" unless svc.respond_to?(method_sym)
  
  kw = { :body => body }
  svc.send(method_sym, path, kw)
end


desc "obtains a random response"
task :mix do
  puts
  default_source = :hi
  source = get_env("source", default_source)
  args = {}
  args[:source] = source unless source == default_source
  mix = mixture_service().get(args)
  puts "#{mix.inspect}"
  puts
end

desc "posts mixture to twitter"
task :twitter_act do
  twitter_service().act()
end

desc "lists data stats for kind"
task :kind_stats do
  kind = get_env("kind")
  puts data_analysis_service().get(kind).inspect
end

desc "deletes all data for kind"
task :kind_delete do
  kind = get_env("kind")
  sure = get_env("sure")
  if sure
    puts data_analysis_service().delete(kind).inspect
  else
    puts "are you sure you want to do this?"
  end
end

desc "searches for artifacts"
task :search do
  q = get_env('q')
  results = artifact_service().search(q)
  if results.empty?
    puts "no results found."
  else
    results.each do |a|
      puts a.inspect
    end
  end
end

namespace :feed do
  
  desc "put a new feed"
  task :put do
    source_name = get_env("src")
  
    feed_hash = { :active => true }
    ENV.each_pair do |k, v|
      if k =~ /^r_(.*)/
        feed_hash[$1] = v
      end
    end
    puts feed_hash.inspect
  
    feed_service().put(source_name, feed_hash)
  end

  desc "load feeds from CSV"
  task :import_csv do
    path = get_env("path")
    open(path) do |stream|
      svc = feed_service()
      CSV::Reader.parse(stream) do |row|
        source_name = row[0]
        feed_url = row[1]
        active = row[2]
        svc.put(source_name, { :url => feed_url, :active => true })
      end
    end
  end

end


namespace :debug do
  
  task :json do
    h = { 'msg' => 'hello' }
    puts h.to_json
  end
  
end
